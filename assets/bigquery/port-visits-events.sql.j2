#standardSQL

# Include some utility functions
{% include 'util.sql.j2' %}

#
# Port visits Events
#

INSERT INTO
  `{{ dest }}` (
    event_id,
    event_type,
    vessel_id,
    seg_id,
    event_start,
    event_end,
    lat_mean,
    lon_mean,
    lat_min,
    lat_max,
    lon_min,
    lon_max,
    regions_mean_position,
    start_distance_from_shore_km,
    end_distance_from_shore_km,
    start_distance_from_port_km,
    end_distance_from_port_km,
    event_info,
    event_vessels )

--# Get base info, calculate mean position and aggregate segment ids.
WITH mean_positions AS (
  SELECT visit_id, AVG(vessel_lat) as lat_mean, AVG(vessel_lon) AS lon_mean,  ARRAY_AGG(DISTINCT seg_id) AS seg_ids
  FROM `{{ port_visits_table }}`,
      UNNEST(events)
  WHERE start_timestamp BETWEEN '{{ start_date }}' AND '{{ end_date }}'
  GROUP BY visit_id
)


#
# Finally, enhance the event with info related to regions and distances.
#
SELECT
  TO_HEX(MD5(FORMAT("%s|%s|%t|%t",'port_visit', vessel_id, start_timestamp, end_timestamp))) AS event_id,
  'port_visit' AS event_type,
  vessel_id,
  cast(NULL AS string) AS seg_id,
  start_timestamp AS event_start,
  end_timestamp AS event_end,
  lat_mean,
  lon_mean,
  start_lat as lat_min,
  end_lat AS lat_max,
  start_lon AS lon_min,
  end_lon AS lon_max,
  regions AS regions_mean_position,
  convert_m_to_km((
        SELECT distance_from_shore_m
        FROM `{{ spatial_measures_table }}`
        WHERE gridcode = format_gridcode(start_lon, start_lat)
  )) AS start_distance_from_shore_km,
  convert_m_to_km((
        SELECT distance_from_shore_m
        FROM `{{ spatial_measures_table }}`
        WHERE gridcode = format_gridcode(end_lon, end_lat)
  )) AS end_distance_from_shore_km,
  convert_m_to_km((
        SELECT distance_from_port_m
        FROM `{{ spatial_measures_table }}`
        WHERE gridcode = format_gridcode(start_lon, start_lat)
  )) AS start_distance_from_port_km,
  convert_m_to_km((
        SELECT distance_from_port_m
        FROM `{{ spatial_measures_table }}`
        WHERE gridcode = format_gridcode(end_lon, end_lat)
  )) AS end_distance_from_port_km,
  TO_JSON_STRING(STRUCT(
        duration_hrs,
        visit_id,
        confidence,
        start_anchorage_id,
        end_anchorage_id,
        seg_ids
  )) as event_info,
  TO_JSON_STRING([STRUCT(
        vessel_id AS `id`,
        vi.ssvid AS `ssvid`,
        vi.shipname.value AS `name`
  )]) as event_vessels
FROM `{{ port_visits_table }}`
  JOIN mean_positions USING (visit_id)
  JOIN `{{ spatial_measures_table }}` sm ON format_gridcode(lon_mean, lat_mean) = sm.gridcode
  JOIN `{{ vessel_info_table }}` vi USING (vessel_id)

