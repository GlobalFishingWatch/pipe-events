#standardSQL

# Include some utility functions
{% include 'util.sql.j2' %}


#
# Spatial measures data
#
spatial_measures_source as (
  SELECT
    *,
  FROM `{{ spatial_measures_table }}`
),

#
# Port visits Events
#
port_visits_source AS (
  SELECT
    *
  FROM `{{ port_visits_table }}`
  WHERE
    confidence >= 2
    -- Time range to test
    AND start_timestamp BETWEEN '{{ start_date }}' AND '{{ end_date }}'
),

vessel_info_source AS (
  SELECT
    *
  FROM `{{ vessel_info_table }}`
),

named_anchorages_source AS (
  SELECT
    *
  FROM `{{ named_anchorages_table }}`
),


gridded_regions as(
  select
    * except(s2_cells),
  from spatial_measures_source
  cross join unnest (s2_cells) as s2_cell
),

--# Get base info, calculate mean position and aggregate segment ids.
mean_positions AS (
  SELECT visit_id, AVG(vessel_lat) as lat_mean, AVG(vessel_lon) AS lon_mean,  ARRAY_AGG(DISTINCT seg_id) AS seg_ids
  FROM port_visits_source,
      UNNEST(events)
  GROUP BY visit_id
),

-- The next 4 queries get the info to generate the format anchorage info. Basicly, is the code created by Hannah ready to join with the final query.
port_visits_with_time_diff AS (
    SELECT
        *
    FROM (
        SELECT
        *,
        TIMESTAMP_DIFF(next_event_timestamp,timestamp,SECOND)/3600 as time_diff_hr
        FROM (
            SELECT
                *,
                LEAD(event_type, 1) OVER (PARTITION BY visit_id ORDER BY timestamp ASC) AS next_event,
                LEAD(timestamp, 1) OVER (PARTITION BY visit_id ORDER BY timestamp ASC) AS next_event_timestamp
            FROM port_visits_source,
                unnest(events) events
            WHERE vessel_id IN (SELECT vessel_id FROM vessel_info_source)
        )
    )
),

port_visits_by_event_type_without_rn_filter AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY visit_id ORDER BY time_diff_hr DESC) rn
    FROM port_visits_with_time_diff
    WHERE event_type in ('PORT_STOP_BEGIN','PORT_STOP_END','PORT_GAP_BEGIN','PORT_GAP_END')
),

port_visits_by_event_type AS (
    SELECT
        *
    FROM port_visits_by_event_type_without_rn_filter
    WHERE rn = 1
),

intermadiate_anchorage AS (
    SELECT
        visit_id,
        anchorage_id,
        iso3,
        label,
        label_source,
        top_destination,
        distance_from_shore_m,
        at_dock,
        named_anchorages_source.lat AS lat,
        named_anchorages_source.lon AS lon,
    FROM port_visits_by_event_type
        JOIN named_anchorages_source ON (port_visits_by_event_type.anchorage_id = named_anchorages_source.s2id)
),

#
# Finally, enhance the event with info related to regions and distances.
#
total_events as (SELECT
  TO_HEX(MD5(FORMAT("%s|%s|%t|%t",'port_visit', vessel_id, start_timestamp, end_timestamp))) AS event_id,
  'port_visit' AS event_type,
  vessel_id,
  cast(NULL AS string) AS seg_id,
  start_timestamp AS event_start,
  end_timestamp AS event_end,
  lat_mean,
  lon_mean,
  start_lat as lat_min,
  end_lat AS lat_max,
  start_lon AS lon_min,
  end_lon AS lon_max,
	ST_GEOGPOINT(lon_mean, lat_mean) as geo,
  S2_CELLIDFROMPOINT(ST_GEOGPOINT(lon_mean, lat_mean), s2_level()) as s2_cell,
  TO_JSON_STRING(STRUCT(
        duration_hrs,
        port_visits_source.visit_id,
        confidence,
        STRUCT(
          start_anchorage_id AS anchorage_id,
          generate_port_id(start_anchorage.iso3, start_anchorage.label) AS id,
          start_anchorage.iso3 AS flag,
          IF (start_anchorage.label_source = 'top_destination', NULL, start_anchorage.label) AS name,
          start_anchorage.top_destination AS top_destination,
          convert_m_to_km( start_anchorage.distance_from_shore_m ) AS distance_from_shore_km,
          start_anchorage.at_dock,
          start_anchorage.lat AS lat,
          start_anchorage.lon AS lon
        ) AS start_anchorage,
        STRUCT(
          end_anchorage_id AS anchorage_id,
          generate_port_id(end_anchorage.iso3, end_anchorage.label) AS id,
          end_anchorage.iso3 AS flag,
          IF (end_anchorage.label_source = 'top_destination', NULL, end_anchorage.label) AS name,
          end_anchorage.top_destination AS top_destination,
          convert_m_to_km( end_anchorage.distance_from_shore_m ) AS distance_from_shore_km,
          end_anchorage.at_dock,
          end_anchorage.lat AS lat,
          end_anchorage.lon AS lon
        ) AS end_anchorage,
        STRUCT(
          intermadiate_anchorage.anchorage_id AS anchorage_id,
          generate_port_id(intermadiate_anchorage.iso3, intermadiate_anchorage.label) AS id,
          intermadiate_anchorage.iso3 AS flag,
          IF (intermadiate_anchorage.label_source = 'top_destination', NULL, intermadiate_anchorage.label) AS name,
          intermadiate_anchorage.top_destination AS top_destination,
          convert_m_to_km( intermadiate_anchorage.distance_from_shore_m ) AS distance_from_shore_km,
          intermadiate_anchorage.at_dock,
          intermadiate_anchorage.lat AS lat,
          intermadiate_anchorage.lon AS lon
        ) AS intermediate_anchorage,
        seg_ids
  )) as event_info,
  TO_JSON_STRING([STRUCT(
        vessel_id AS `id`,
        vi.ssvid AS `ssvid`,
        vi.shipname.value AS `name`
  )]) as event_vessels
FROM port_visits_source
  JOIN mean_positions USING (visit_id)
  JOIN vessel_info_source vi USING (vessel_id)
  JOIN named_anchorages_source AS start_anchorage ON (start_anchorage_id = start_anchorage.s2id)
  JOIN named_anchorages_source AS end_anchorage ON (end_anchorage_id = end_anchorage.s2id)
  LEFT JOIN intermadiate_anchorage ON (port_visits_source.visit_id = intermadiate_anchorage.visit_id)
),

create_event_region_matches as (
    SELECT events.event_id, id, layer,
    FROM
      total_events AS events
    JOIN gridded_regions r 
    ON events.s2_cell = r.s2_cell
    WHERE ST_INTERSECTS(events.geo, r.geo)
  ),
  event_by_layer_by_id as (
    select 
      event_id, layer, id
    from create_event_region_matches
    group by 1, 2, 3
  ),
  events_by_layer as(
    select
      event_id, CONCAT('"', layer, '":' ,TO_JSON_STRING(array_agg(id))) as json_frament
    from event_by_layer_by_id
    group by event_id, layer
  ),
  event_with_region as (
    select
      event_id, 
      parse_regions_to_struct(CONCAT( "{", STRING_AGG(json_frament, ","), "}")) as regions
    from events_by_layer
    group by 1
  )

select total_events.* except (s2_cell, geo),
spatial_measures_mean.regions AS regions_mean_position
from total_events
left JOIN event_with_region spatial_measures_mean using (event_id)
