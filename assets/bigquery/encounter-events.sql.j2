#standardSQL

-- Include some utility functions
{% include 'util.sql.j2' %}

WITH

  #
  # Spatial measures data
  #
  source_spatial_measures AS (
    SELECT *
    FROM `{{ spatial_measures_table }}`
  ),

  #
  # Vessels byyear sources
  #
  source_all_vessels AS (
    SELECT
      *
    FROM `{{ all_vessels_byyear_v_table }}`
  ),

  #
  # Vessel info data
  #
  source_vessel_info AS (
    SELECT *
    FROM `{{ vessel_info_table }}`
  ),

  #
  # encounters
  #
  source_encounters AS (
    SELECT *
    FROM `{{ encounters_table }}`
  ),

  #
  # Regions data
  #
  source_regions as (
    SELECT
      *,
    FROM `{{ regions_table }}`
  ),

  gridded_regions as(
    select
      * except(s2_cells),
    from source_regions
    cross join unnest (s2_cells) as s2_cell
  ),

  #
  # Good encounter events
  #
  encounters AS (
  SELECT
    *
  FROM
    pipe_production_v20201001.encounters
  WHERE
    TIMESTAMP_DIFF(end_time, start_time, SECOND) > (3600 * 2)
    AND median_speed_knots < 2 ),
  #
  # Duplicate encounters so that we have an event for each vessel
  #
  flattened_encounters AS (
  SELECT
    vessel_1_id AS vessel_id,
    vessel_2_id AS encountered_vessel_id,
    CONCAT(encounter_id, ".1" ) AS event_id,
    vessel_1_seg_ids as seg_ids,
    vessel_2_seg_ids as encountered_seg_ids,
    vessel_1_point_count AS vessel_point_count,
    vessel_2_point_count AS encountered_point_count,
    * EXCEPT(vessel_1_id,
      vessel_2_id)
  FROM
    encounters
  UNION ALL
  SELECT
    vessel_2_id AS vessel_id,
    vessel_1_id AS encountered_vessel_id,
    CONCAT(encounter_id, ".2" ) AS event_id,
    vessel_2_seg_ids as seg_ids,
    vessel_1_seg_ids as encountered_seg_ids,
    vessel_2_point_count AS vessel_point_count,
    vessel_1_point_count AS encountered_point_count,
    * EXCEPT(vessel_1_id,
      vessel_2_id)
  FROM
    encounters ),

  #
  # Include basic vessel information on the event
  #
  complete_encounter_event AS (
    SELECT
      encounter.*,
      main_vessel.shipname AS main_vessel_shipname,
      main_vessel.ssvid AS main_vessel_ssvid,
      main_vessel.shiptype AS main_vessel_class,
      main_vessel.flag AS main_vessel_flag,
      encountered_vessel2.shipname AS encountered_vessel_shipname,
      encountered_vessel2.ssvid AS encountered_vessel_ssvid,
      encountered_vessel2.shiptype AS encountered_vessel_class,
      encountered_vessel2.flag AS encountered_vessel_flag,
       ST_GEOGPOINT(mean_longitude, mean_latitude) as geo,
      S2_CELLIDFROMPOINT(ST_GEOGPOINT(mean_longitude, mean_latitude), s2_level()) as s2_cell
    FROM
      flattened_encounters AS encounter
    LEFT JOIN
      source_all_vessels AS main_vessel
      ON
      encounter.vessel_id = main_vessel.vessel_id
      AND (EXTRACT(YEAR FROM encounter.start_time)= main_vessel.year OR main_vessel.year IS NULL)
    LEFT JOIN
      source_all_vessels AS encountered_vessel2
    ON
      encountered_vessel_id = encountered_vessel2.vessel_id
      AND (EXTRACT(YEAR FROM encounter.start_time)= encountered_vessel2.year OR encountered_vessel2.year IS NULL)
  ),
  create_event_region_matches as (
    SELECT encounters.event_id, id, layer,
    FROM
      complete_encounter_event AS encounters
    JOIN gridded_regions r 
    ON encounters.s2_cell = r.s2_cell
    WHERE ST_INTERSECTS(encounters.geo, r.geo)
  ),
  event_by_layer_by_id as (
    select 
      event_id, layer, id
    from create_event_region_matches
    group by 1, 2, 3
  ),
  events_by_layer as(
    select
      event_id, CONCAT('"', layer, '":' ,TO_JSON_STRING(array_agg(id))) as json_fragment
    from event_by_layer_by_id
    group by event_id, layer
  ),
  event_with_region as (
    select
      event_id, 
      parse_regions_to_struct(CONCAT( "{", STRING_AGG(json_fragment, ","), "}")) as regions
    from events_by_layer
    group by 1
  ),

  #
  # Add spatial measures region information
  #
  encounters_regions AS (
    SELECT
      encounters.*,   
      spatial_measures_mean.regions AS regions_mean_position
    FROM
      complete_encounter_event AS encounters
    LEFT JOIN event_with_region spatial_measures_mean using (event_id)
   )


  SELECT
    event_id,
    'encounter' AS event_type,
    vessel_id,
--    NULL AS seg_id,
    start_time AS event_start,
    end_time AS event_end,
    mean_latitude AS lat_mean,
    mean_longitude AS lon_mean,
    mean_latitude AS lat_min,
    mean_latitude AS lat_max,
    mean_longitude AS lon_min,
    mean_longitude AS lon_max,
    regions_mean_position,
    convert_m_to_km( spatial_measures_mean.distance_from_shore_m ) AS start_distance_from_shore_km,
    convert_m_to_km( spatial_measures_mean.distance_from_shore_m ) AS end_distance_from_shore_km,
    convert_m_to_km( spatial_measures_mean.distance_from_port_m ) AS start_distance_from_port_km,
    convert_m_to_km( spatial_measures_mean.distance_from_port_m ) AS end_distance_from_port_km,
    TO_JSON_STRING(
      STRUCT(
        ROUND(median_distance_km,3) AS median_distance_km,
        ROUND(median_speed_knots,3) AS median_speed_knots,
        encountered_vessel_id,
        CONCAT(main_vessel_class, '-', encountered_vessel_class) AS vessel_classes
     )
    ) AS event_info,
    TO_JSON_STRING([
      STRUCT(
        vessel_id AS `id`,
        main_vessel_ssvid AS `ssvid`,
        main_vessel_shipname AS `name`,
        vessel_point_count AS point_count,
        main_vessel_class AS `type`,
        main_vessel_flag AS `flag`,
        seg_ids
      ),
      STRUCT(
        encountered_vessel_id AS `id`,
        encountered_vessel_ssvid AS `ssvid`,
        encountered_vessel_shipname AS `name`,
        encountered_point_count AS point_count,
        encountered_vessel_class as `type`,
        encountered_vessel_flag AS `flag`,
        encountered_seg_ids AS seg_ids
      )
    ]) as event_vessels
  FROM encounters_regions
    JOIN source_spatial_measures AS spatial_measures_mean ON format_gridcode(mean_longitude, mean_latitude) = spatial_measures_mean.gridcode