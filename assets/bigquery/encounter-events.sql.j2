#standardSQL
--
-- Creates a port-id based in the iso3 and the label of the port
--
CREATE TEMPORARY FUNCTION
  generate_port_id (iso3 STRING,
    label STRING) AS ( LOWER(CONCAT(iso3,"-",REGEXP_REPLACE(NORMALIZE(label),' ',''))) );
WITH
  --
  -- Declare the source tables we are going to use through the entire query
  --
  source_encounters AS (
  SELECT
    *
  FROM
    `{{ source }}`),
  source_vessel_info AS (
  SELECT
    *
  FROM
    `{{ vessel_info }}`),
  source_spatial_measures AS (
  SELECT
    *
  FROM
    `{{ spatial_measures }}`),
  source_country_codes AS (
  SELECT
    *
  FROM
    `{{ country_codes }}` ),
  source_voyages AS (
  SELECT
    *
  FROM
    `{{ voyages }}`),
  source_anchorages AS (
  SELECT
    *
  FROM
    `{{ named_anchorages }}`),
  --
  -- We need to flatten voyages so that we have a record for each vessel id
  --
  flattened_voyages AS (
  SELECT
    trip_id,
    trip_start,
    trip_end,
    trip_start_anchorage_id,
    trip_end_anchorage_id,
    vessel_id
  FROM
    source_voyages
  CROSS JOIN
    UNNEST(vessel_ids) AS vessel_id ),
  --
  -- Good encounter events
  --
  encounters AS (
  SELECT
    *
  FROM
    source_encounters
  WHERE
    TIMESTAMP_DIFF(end_time, start_time, SECOND) > (3600 * 2)
    AND median_speed_knots < 2),
  --
  -- Duplicate encounters so that we have an event for each vessel
  --
  flattened_encounters AS (
  SELECT
    vessel_1_id AS vessel_id,
    vessel_2_id AS encountered_vessel_id,
    CONCAT( TO_HEX(MD5(FORMAT("encounter|%s|%s|%t|%t", vessel_1_id,vessel_2_id, start_time, end_time))), ".1" ) AS event_id,
    * EXCEPT(vessel_1_id, vessel_2_id)
  FROM
    encounters
  UNION ALL
  SELECT
    vessel_2_id AS vessel_id,
    vessel_1_id AS encountered_vessel_id,
    CONCAT( TO_HEX(MD5(FORMAT("encounter|%s|%s|%t|%t", vessel_1_id,vessel_2_id, start_time, end_time))), ".2" ) AS event_id,
    * EXCEPT(vessel_1_id, vessel_2_id)
  FROM
    encounters ),
  --
  -- Include additional information on the final event, such as basic vessel
  -- information for each vessel involved in the encounter or regional and
  -- spatial information
  --
  complete_encounter_event AS (
  SELECT
    encounter.*,
    main_vessel.shipname.value AS main_vessel_shipname,
    main_vessel.ssvid AS main_vessel_ssvid,
    main_vessel_country.iso3 AS main_vessel_flag,
    encountered_vessel.shipname.value AS encountered_vessel_shipname,
    encountered_vessel.ssvid AS encountered_vessel_ssvid,
    encountered_vessel_country.iso3 AS encountered_vessel_flag,
    main_vessel_trip_start_anchorages.s2id AS main_vessel_trip_start_anchorage_id,
    main_vessel_trip_start_anchorages.iso3 AS main_vessel_trip_start_iso3,
    main_vessel_trip_start_anchorages.label AS main_vessel_trip_start_label,
    main_vessel_trip_end_anchorages.s2id AS main_vessel_trip_end_anchorage_id,
    main_vessel_trip_end_anchorages.iso3 AS main_vessel_trip_end_iso3,
    main_vessel_trip_end_anchorages.label AS main_vessel_trip_end_label,
    encountered_vessel_trip_start_anchorages.s2id AS encountered_vessel_trip_start_anchorage_id,
    encountered_vessel_trip_start_anchorages.iso3 AS encountered_vessel_trip_start_iso3,
    encountered_vessel_trip_start_anchorages.label AS encountered_vessel_trip_start_label,
    encountered_vessel_trip_end_anchorages.s2id AS encountered_vessel_trip_end_anchorage_id,
    encountered_vessel_trip_end_anchorages.iso3 AS encountered_vessel_trip_end_iso3,
    encountered_vessel_trip_end_anchorages.label AS encountered_vessel_trip_end_label,
    measures.distance_from_shore_m AS distance_from_shore_m,
    measures.distance_from_port_m AS distance_from_port_m,
    measures.elevation_m AS elevation_m,
    measures.regions AS regions
  FROM
    flattened_encounters AS encounter
  INNER JOIN
    source_vessel_info AS main_vessel
  USING
    (vessel_id)
  INNER JOIN
    source_vessel_info AS encountered_vessel
  ON
    encountered_vessel_id = encountered_vessel.vessel_id
  INNER JOIN
    source_spatial_measures AS measures
  ON
    FORMAT("lon:%+07.2f_lat:%+07.2f", ROUND(encounter.mean_longitude/0.01)*0.01, ROUND(encounter.mean_latitude/0.01)*0.01) = measures.gridcode
    AND measures.distance_from_shore_m > 10000
  INNER JOIN
    source_country_codes AS main_vessel_country
  ON
    SUBSTR(main_vessel.ssvid, 1, 3) = CAST(main_vessel_country.code AS string)
  INNER JOIN
    source_country_codes AS encountered_vessel_country
  ON
    SUBSTR(encountered_vessel.ssvid, 1, 3) = CAST(encountered_vessel_country.code AS string)
  LEFT JOIN
    flattened_voyages AS main_vessel_voyages
  ON
    main_vessel.vessel_id = main_vessel_voyages.vessel_id
    AND main_vessel_voyages.trip_start < encounter.start_time
    AND main_vessel_voyages.trip_end > encounter.end_time
  LEFT JOIN
    source_anchorages AS main_vessel_trip_start_anchorages
  ON
    main_vessel_voyages.trip_start_anchorage_id = main_vessel_trip_start_anchorages.s2id
  LEFT JOIN
    source_anchorages AS main_vessel_trip_end_anchorages
  ON
    main_vessel_voyages.trip_end_anchorage_id = main_vessel_trip_end_anchorages.s2id
  LEFT JOIN
    flattened_voyages AS encountered_vessel_voyages
  ON
    encountered_vessel.vessel_id = encountered_vessel_voyages.vessel_id
    AND encountered_vessel_voyages.trip_start < encounter.start_time
    AND encountered_vessel_voyages.trip_end > encounter.end_time
  LEFT JOIN
    source_anchorages AS encountered_vessel_trip_start_anchorages
  ON
    encountered_vessel_voyages.trip_start_anchorage_id = encountered_vessel_trip_start_anchorages.s2id
  LEFT JOIN
    source_anchorages AS encountered_vessel_trip_end_anchorages
  ON
    encountered_vessel_voyages.trip_end_anchorage_id = encountered_vessel_trip_end_anchorages.s2id ),
  --
  -- Main events query
  --
  result AS (
  SELECT
    event_id,
    'encounter' AS event_type,
    vessel_id,
    start_time AS event_start,
    end_time AS event_end,
    mean_latitude AS lat_mean,
    mean_longitude AS lon_mean,
    mean_latitude AS lat_min,
    mean_latitude AS lat_max,
    mean_longitude AS lon_min,
    mean_longitude AS lon_max,
    TO_JSON_STRING( STRUCT( ROUND(median_distance_km,3) AS median_distance_km,
        ROUND(median_speed_knots,3) AS median_speed_knots,
        encountered_vessel_id,
        elevation_m,
        distance_from_shore_m,
        distance_from_port_m,
        STRUCT(regions.eez,
          regions.fao,
          regions.rfmo) AS regions ) ) AS event_info,
    TO_JSON_STRING([ STRUCT( vessel_id AS `id`,
        main_vessel_ssvid AS `ssvid`,
        main_vessel_shipname AS `name`,
        main_vessel_flag AS `flag`,
        STRUCT(main_vessel_trip_start_anchorage_id AS anchorage_id,
          generate_port_id(main_vessel_trip_start_iso3,
            main_vessel_trip_start_label) AS port_id,
          main_vessel_trip_start_iso3 AS iso,
          main_vessel_trip_start_label AS label) AS origin_port,
        STRUCT(main_vessel_trip_end_anchorage_id AS anchorage_id,
          generate_port_id(main_vessel_trip_end_iso3,
            main_vessel_trip_end_label) AS port_id,
          main_vessel_trip_end_iso3 AS iso,
          main_vessel_trip_end_label AS label) AS destination_port ),
      STRUCT( encountered_vessel_id AS `id`,
        encountered_vessel_ssvid AS `ssvid`,
        encountered_vessel_shipname AS `name`,
        encountered_vessel_flag AS `flag`,
        STRUCT(encountered_vessel_trip_start_anchorage_id AS anchorage_id,
          generate_port_id(encountered_vessel_trip_start_iso3,
            encountered_vessel_trip_start_label) AS port_id,
          encountered_vessel_trip_start_iso3 AS iso,
          encountered_vessel_trip_start_label AS label) AS origin_port,
        STRUCT(encountered_vessel_trip_end_anchorage_id AS anchorage_id,
          generate_port_id(encountered_vessel_trip_end_iso3,
            encountered_vessel_trip_end_label) AS port_id,
          encountered_vessel_trip_end_iso3 AS iso,
          encountered_vessel_trip_end_label AS label) AS destination_port ) ]) AS event_vessels,
    ST_GEOGFROMTEXT(CONCAT('POINT (', CAST(mean_longitude AS string), ' ', CAST(mean_latitude AS string), ')')) AS event_geography
  FROM
    complete_encounter_event )
SELECT
  *
FROM
  result
