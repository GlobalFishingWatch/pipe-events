#standardSQL

-- Include some utility functions
{% include 'util.sql.j2' %}

WITH

  #
  # Spatial measures data
  #
  source_spatial_measures AS (
    SELECT *
    FROM `{{ spatial_measures_table }}`
  ),

  #
  # Vessels byyear sources
  #
  source_support_vessels AS (
    SELECT
      year,
      mmsi AS ssvid,
      'support' AS class
    FROM `{{ support_vessels_byyear_table }}`
  ),

  source_carriers_vessels AS (
    SELECT
        year,
        mmsi AS ssvid,
        'carrier' AS class
    FROM `{{ carrier_vessels_byyear_table }}`
  ),

  source_fishing_vessels AS (
    SELECT
        year,
        ssvid,
        'fishing' AS class
    FROM `{{ fishing_vessels_byyear_table }}`
  ),

  #
  # Vessel info data
  #
  source_vessel_info AS (
    SELECT *
    FROM `{{ vessel_info_table }}`
  ),

  #
  # encounters
  #
  source_encounters AS (
    SELECT *
    FROM pipe_production_v20201001.encounters
  ),

  #
  # Unify support, carriers and support vessels in one table
  #
  # Hannah said:
  # the support vessels were manually checked by TMT, but we likely estimated some as fishing
  # We could change the fishing vessel subquery to say AND NOT IN support vessel list.
  # If we concat the ssvid codes and years to avoid losing vessels in others years
  support_carrier_and_fishing_vessels AS (
        SELECT * FROM source_carriers_vessels
        UNION ALL
        SELECT *
        FROM source_fishing_vessels fishing_vessel
        WHERE CONCAT(ssvid, '-', year) NOT IN (
                SELECT CONCAT(ssvid,'-', year)
                FROM source_support_vessels support_vessel
                WHERE support_vessel.ssvid = fishing_vessel.ssvid
                    AND support_vessel.year = fishing_vessel.year
            )
            AND CONCAT(ssvid, '-', year) NOT IN (
                SELECT CONCAT(ssvid,'-', year)
                FROM source_carriers_vessels carrer_vessel
                WHERE carrer_vessel.ssvid = fishing_vessel.ssvid
                    AND carrer_vessel.year = fishing_vessel.year
            )
        UNION ALL
        SELECT * FROM source_support_vessels
  ),

  support_carrier_and_fishing_vessels_deduplicated AS (
      SELECT DISTINCT ssvid, year, class
      FROM support_carrier_and_fishing_vessels
  ),

   #
  # Populate the basic info for all vessels (including vessels are not support, carrier or fishing)
  #
  support_carrier_and_fishing_with_id AS (
    SELECT
        vessel_info.vessel_id,
        vessel_info.shipname,
        vessel_info.ssvid,
        `world-fishing-827.udfs.mmsi_to_iso3`(vessel_info.ssvid) AS flag,
        vessels.year,
        class
    FROM source_vessel_info vessel_info
     JOIN support_carrier_and_fishing_vessels_deduplicated vessels ON (
            vessel_info.ssvid = vessels.ssvid AND
            (vessels.year BETWEEN EXTRACT(YEAR FROM vessel_info.first_timestamp) AND EXTRACT(YEAR FROM vessel_info.last_timestamp))
      )
  ),

  all_vessels_with_id AS (
      SELECT * FROM support_carrier_and_fishing_with_id
      UNION ALL
      SELECT
        vessel_info.vessel_id,
        vessel_info.shipname,
        vessel_info.ssvid,
        `world-fishing-827.udfs.mmsi_to_iso3`(vessel_info.ssvid) AS flag,
        null AS year,
        'other' AS class
      FROM source_vessel_info vessel_info WHERE vessel_id NOT IN (SELECT vessel_id FROM support_carrier_and_fishing_with_id)
  ),


  #
  # Good encounter events
  #
  encounters AS (
  SELECT
    *
  FROM
    pipe_production_v20201001.encounters
  WHERE
    TIMESTAMP_DIFF(end_time, start_time, SECOND) > (3600 * 2)
    AND median_speed_knots < 2 ),
  #
  # Duplicate encounters so that we have an event for each vessel
  #
  flattened_encounters AS (
  SELECT
    vessel_1_id AS vessel_id,
    vessel_2_id AS encountered_vessel_id,
    CONCAT(encounter_id, ".1" ) AS event_id,
    vessel_1_seg_ids as seg_ids,
    vessel_2_seg_ids as encountered_seg_ids,
    vessel_1_point_count AS vessel_point_count,
    vessel_2_point_count AS encountered_point_count,
    * EXCEPT(vessel_1_id,
      vessel_2_id)
  FROM
    encounters
  UNION ALL
  SELECT
    vessel_2_id AS vessel_id,
    vessel_1_id AS encountered_vessel_id,
    CONCAT(encounter_id, ".2" ) AS event_id,
    vessel_2_seg_ids as seg_ids,
    vessel_1_seg_ids as encountered_seg_ids,
    vessel_2_point_count AS vessel_point_count,
    vessel_1_point_count AS encountered_point_count,
    * EXCEPT(vessel_1_id,
      vessel_2_id)
  FROM
    encounters ),

  #
  # Include basic vessel information on the event
  #
  complete_encounter_event AS (
    SELECT
      encounter.*,
      main_vessel.shipname.value AS main_vessel_shipname,
      main_vessel.ssvid AS main_vessel_ssvid,
      main_vessel.class AS main_vessel_class,
      main_vessel.flag AS main_vessel_flag,
      encountered_vessel2.shipname.value AS encountered_vessel_shipname,
      encountered_vessel2.ssvid AS encountered_vessel_ssvid,
      encountered_vessel2.class AS encountered_vessel_class,
      encountered_vessel2.flag AS encountered_vessel_flag
    FROM
      flattened_encounters AS encounter
    LEFT JOIN
      all_vessels_with_id AS main_vessel
      ON
      encounter.vessel_id = main_vessel.vessel_id
      AND (EXTRACT(YEAR FROM encounter.start_time)= main_vessel.year OR main_vessel.year IS NULL)
    LEFT JOIN
      all_vessels_with_id AS encountered_vessel2
    ON
      encountered_vessel_id = encountered_vessel2.vessel_id
      AND (EXTRACT(YEAR FROM encounter.start_time)= encountered_vessel2.year OR encountered_vessel2.year IS NULL)
  )


  SELECT
    event_id,
    'encounter' AS event_type,
    vessel_id,
--    NULL AS seg_id,
    start_time AS event_start,
    end_time AS event_end,
    mean_latitude AS lat_mean,
    mean_longitude AS lon_mean,
    mean_latitude AS lat_min,
    mean_latitude AS lat_max,
    mean_longitude AS lon_min,
    mean_longitude AS lon_max,
    spatial_measures_mean.regions AS regions_mean_position,
    convert_m_to_km( spatial_measures_mean.distance_from_shore_m ) AS start_distance_from_shore_km,
    convert_m_to_km( spatial_measures_mean.distance_from_shore_m ) AS end_distance_from_shore_km,
    convert_m_to_km( spatial_measures_mean.distance_from_port_m ) AS start_distance_from_port_km,
    convert_m_to_km( spatial_measures_mean.distance_from_port_m ) AS end_distance_from_port_km,
    TO_JSON_STRING(
      STRUCT(
        ROUND(median_distance_km,3) AS median_distance_km,
        ROUND(median_speed_knots,3) AS median_speed_knots,
        encountered_vessel_id,
        CONCAT(main_vessel_class, '-', encountered_vessel_class) AS vessel_classes
     )
    ) AS event_info,
    TO_JSON_STRING([
      STRUCT(
        vessel_id AS `id`,
        main_vessel_ssvid AS `ssvid`,
        main_vessel_shipname AS `name`,
        vessel_point_count AS point_count,
        main_vessel_class AS `type`,
        main_vessel_flag AS `flag`,
        seg_ids
      ),
      STRUCT(
        encountered_vessel_id AS `id`,
        encountered_vessel_ssvid AS `ssvid`,
        encountered_vessel_shipname AS `name`,
        encountered_point_count AS point_count,
        encountered_vessel_class as `type`,
        encountered_vessel_flag AS `flag`,
        encountered_seg_ids AS seg_ids
      )
    ]) as event_vessels
  FROM complete_encounter_event
    JOIN source_spatial_measures AS spatial_measures_mean ON format_gridcode(mean_longitude, mean_latitude) = spatial_measures_mean.gridcode