#standardSQL

# Include some utility functions
{% include 'util.sql.j2' %}

#
# Loitering Events
#

INSERT INTO
  `{{ dest }}` (
    event_id,
    event_type,
    vessel_id,
    seg_id,
    event_start,
    event_end,
    lat_mean,
    lon_mean,
    lat_min,
    lat_max,
    lon_min,
    lon_max,
    regions_mean_position,
    start_distance_from_shore_km,
    end_distance_from_shore_km,
    start_distance_from_port_km,
    end_distance_from_port_km,
    event_info,
    event_vessels )

--# Get base info, populate vessel info, and calculate vessel_id, lat_mean, lot_mean and convert distances to km
WITH base_loitering_event AS (
    SELECT
        TO_HEX(MD5(FORMAT("%s|%s|%t|%t",'loitering', vessel_id, loitering_start_timestamp, loitering_end_timestamp))) AS event_id,
        'loitering' AS event_type,
        vessel_id,
        seg_id,
        loitering_start_timestamp AS event_start,
        loitering_end_timestamp AS event_end,
        (start_lat + end_lat) / 2 AS lat_mean,
        (start_lon + end_lon) / 2 AS lon_mean,
        start_lat AS lat_min,
        start_lon AS lon_min,
        end_lat AS lat_max,
        end_lon AS lon_max,
      TO_JSON_STRING(STRUCT(
        loitering_hours,
        convert_nm_to_km(tot_distance_nm) AS total_distance_km,
        convert_nm_to_km(avg_distance_from_shore_nm) AS avg_distance_from_shore_km,
        avg_speed_knots
      )) AS event_info,
      TO_JSON_STRING([STRUCT(
        vessel_id AS `id`,
        lo.ssvid AS `ssvid`,
        si.shipname.value AS `name`,
        seg_id
      )]) as event_vessels
    FROM `{{ loitering_table }}` lo
        JOIN `{{ segments_info_table }}` si using (seg_id)
    WHERE loitering_start_timestamp >= '{{ start_date }}'
        AND loitering_start_timestamp < '{{ end_date }}'
)

#
# Finally, enhance the event with info related to regions and distances.
#
SELECT
    event_id,
    event_type,
    vessel_id,
    seg_id,
    event_start,
    event_end,
    lat_mean,
    lon_mean,
    lat_min,
    lon_min,
    lat_max,
    lon_max,
    regions AS regions_mean_position,
    convert_m_to_km(
      spatial_measures_start.distance_from_shore_m
    ) AS start_distance_from_shore_km,
    convert_m_to_km(
      spatial_measures_end.distance_from_shore_m
    )) AS end_distance_from_shore_km,
    convert_m_to_km(
      spatial_measures_start.distance_from_port_m
    ) AS start_distance_from_port_km,
    convert_m_to_km(
      spatial_measures_end.distance_from_port_m
    ) AS end_distance_from_port_km,
    event_info,
    event_vessels
FROM base_loitering_event
JOIN `{{ spatial_measures_table }}` spatial_measures_start ON
    format_gridcode(lon_min, lat_min) = sm.gridcode;
JOIN `{{ spatial_measures_table }}` spatial_measures_end ON
    format_gridcode(lon_max, lat_max) = sm.gridcode;
