#StandardSQL
INSERT INTO `{{ dest }}`
  (
    event_id, event_type, vessel_id, timestamp,
    lat_mean, lon_mean, timestamp_min, timestamp_max,
    lat_min, lat_max, lon_min, lon_max,
    event_info
  )

WITH
  message AS (
  SELECT
    seg_id,
    timestamp,
    lat,
    lon,
    ifnull(nnet_score,
      logistic_score) AS score
  FROM
    `{{ messages }}*`
  WHERE
    _TABLE_SUFFIX BETWEEN '{{ start_yyyymmdd }}' AND '{{ end_yyyymmdd }}'
  ),

  best_segment_vessel as (
  SELECT DISTINCT
    seg_id,
    FIRST_VALUE(vessel_id) OVER (PARTITION BY seg_id ORDER BY last_date DESC, vessel_id) as vessel_id
  FROM
    `{{ segment_vessel }}`

  ),

  good_seg as (
  SELECT
    seg_id
  FROM
    `{{ segment_info }}`
  WHERE
    pos_count >= 10
  ),

  vessel_message as (
  SELECT
    *
  FROM
    message
  JOIN good_seg USING (seg_id)
  JOIN best_segment_vessel USING (seg_id)
  ),

  prev_score_message AS (
  SELECT
    vessel_id,
    timestamp,
    score,
    LAG(score) OVER (PARTITION BY vessel_id, date(timestamp) ORDER BY timestamp) AS prev_score
  FROM
    vessel_message
  ),

  event_start as (
  SELECT
    vessel_id,
    timestamp
  FROM
    prev_score_message
  WHERE
    prev_score is null or score != prev_score
  ),

  event_range as (
  SELECT
    vessel_id,
    timestamp as event_start,
    lead(timestamp) over (partition by vessel_id order by timestamp) as next_event_start
  FROM
    event_start
  ),

  event_message as (
  SELECT
    vessel_message.*,
    event_range.event_start
  FROM
    vessel_message
  JOIN
    event_range
  ON
    vessel_message.vessel_id = event_range.vessel_id AND
    vessel_message.timestamp >= event_range.event_start AND
    (event_range.next_event_start is null OR vessel_message.timestamp < event_range.next_event_start)
  ),

  event as (
  SELECT
    vessel_id,
    event_start as timestamp,
    avg(lat) as lat_mean,
    avg(lon) as lon_mean,
    min(timestamp) as timestamp_min,
    max(timestamp) as timestamp_max,
    min(lat) as lat_min,
    max(lat) as lat_max,
    min(lon) as lon_min,
    max(lon) as lon_max,
    count(*) as message_count
  FROM
    event_message
  WHERE
    score = 1.0
  GROUP BY
    vessel_id, event_start
  )

SELECT
  TO_HEX(MD5(FORMAT("%s|%s|%t",'fishing', vessel_id, timestamp))) AS event_id,
  'fishing' as event_type,
  vessel_id,
  timestamp,
  lat_mean,
  lon_mean,
  timestamp_min,
  timestamp_max,
  lat_min,
  lat_max,
  lon_min,
  lon_max,
  TO_JSON_STRING(STRUCT( message_count )) AS event_info
FROM
  event
