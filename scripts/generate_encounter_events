#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_ENCOUNTERS_TABLE \
  SOURCE_VESSEL_INFO_TABLE \
  SOURCE_VOYAGES_TABLE \
  SOURCE_ALL_VESSELS_TABLE \
  SOURCE_CARRIERS_VESSELS_TABLE \
  SOURCE_SUPPORT_VESSELS_TABLE \
  SOURCE_SPATIAL_MEASURES_TABLE \
  SOURCE_COUNTRY_CODES_TABLE \
  SOURCE_NAMED_ANCHORAGES_TABLE \
  SOURCE_FISHING_VESSELS_TABLE \
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n$0 DATE_RANGE SOURCE_ENCOUNTERS_TABLE SOURCE_VESSEL_INFO_TABLE SOURCE_VOYAGES_TABLE SOURCE_ALL_VESSELS_TABLE SOURCE_CARRIERS_VESSELS_TABLE SOURCE_SUPPORT_VESSELS_TABLE SOURCE_SPATIAL_MEASURES_TABLE SOURCE_COUNTRY_CODES_TABLE SOURCE_NAMED_ANCHORAGES_TABLE SOURCE_FISHING_VESSELS_TABLE DEST_TABLE\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

echo "Running $0"
echo "  DATE_RANGE: $DATE_RANGE"
echo "  SOURCE_ENCOUNTERS_TABLE: $SOURCE_ENCOUNTERS_TABLE"
echo "  SOURCE_VESSEL_INFO_TABLE: $SOURCE_VESSEL_INFO_TABLE"
echo "  SOURCE_VOYAGES_TABLE: $SOURCE_VOYAGES_TABLE"
echo "  SOURCE_ALL_VESSELS_TABLE: $SOURCE_ALL_VESSELS_TABLE"
echo "  SOURCE_CARRIERS_VESSELS_TABLE: $SOURCE_CARRIERS_VESSELS_TABLE"
echo "  SOURCE_SUPPORT_VESSELS_TABLE: $SOURCE_SUPPORT_VESSELS_TABLE"
echo "  SOURCE_SPATIAL_MEASURES_TABLE: $SOURCE_SPATIAL_MEASURES_TABLE"
echo "  SOURCE_COUNTRY_CODES_TABLE: $SOURCE_COUNTRY_CODES_TABLE"
echo "  SOURCE_NAMED_ANCHORAGES_TABLE: $SOURCE_NAMED_ANCHORAGES_TABLE"
echo "  SOURCE_FISHING_VESSELS_TABLE: $SOURCE_FISHING_VESSELS_TABLE"
echo "  DEST_TABLE: $DEST_TABLE"

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n${0} ${ARGS[*]}\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [[ -z $END_DATE ]]; then
  END_DATE=${START_DATE}
fi

################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  ${DEST_TABLE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Delete existing records
################################################################################
DELETE_SQL=${ASSETS}/bigquery/delete-daterange.sql.j2
echo "Deleting existing records for ${START_DATE} to ${END_DATE}"
jinja2 ${DELETE_SQL} \
  -D table=${DEST_TABLE//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --max_rows=0
if [ "$?" -ne 0 ]; then
  echo "  Unable to delete records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

################################################################################
# Inserting new records
################################################################################
echo "Regenerating records"
SQL=${ASSETS}/bigquery/encounter-events.sql.j2

jinja2 "${SQL}" \
  -D voyages_table=${SOURCE_VOYAGES_TABLE//:/.} \
  -D encounters_table=${SOURCE_ENCOUNTERS_TABLE//:/.} \
  -D vessel_info_table=${SOURCE_VESSEL_INFO_TABLE//:/.} \
  -D fishing_vessels_table=${SOURCE_FISHING_VESSELS_TABLE//:/.} \
  -D carrier_vessels_table=${SOURCE_CARRIERS_VESSELS_TABLE//:/.} \
  -D support_vessels_table=${SOURCE_SUPPORT_VESSELS_TABLE//:/.} \
  -D spatial_measures_table=${SOURCE_SPATIAL_MEASURES_TABLE//:/.} \
  -D country_codes_table=${SOURCE_COUNTRY_CODES_TABLE//:/.} \
  -D named_anchorages_table=${SOURCE_NAMED_ANCHORAGES_TABLE//:/.} \
  -D named_anchorages_table=${SOURCE_NAMED_ANCHORAGES_TABLE//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --headless --max_rows=0 --allow_large_results \
     --append_table \
     --destination_table ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE}"
  exit 1
fi

echo "${DEST_TABLE} Done."
