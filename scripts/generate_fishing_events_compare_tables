#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_MESSAGES \
  SOURCE_SEGMENT_VESSEL \
  SOURCE_SEGS \
  SOURCE_VI_SSVID_BY_YEAR \
  SOURCE_FISHING_VESSELS \
  ALL_VESSELS_BYYEAR_VERSION \
  SOURCE_SPATIAL_MEASURES \
  REGIONS_TABLE \
  VESSEL_IDENTITY_CORE \
  VESSEL_IDENTITY_AUTHORIZATION \
  DEST_TABLE
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n${0} ${ARGS[*]}\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [[ -z $END_DATE ]]; then
  END_DATE=${START_DATE}
fi

end_date_minus_one_day=$(date --date="${END_DATE} -1 day" +%Y-%m-%d)
end_date_minus_two_days=$(date --date="${END_DATE} -2 days" +%Y-%m-%d)

end_date_no_hyphens=${END_DATE//-}
end_date_minus_one_day_no_hyphens=${end_date_minus_one_day//-}
end_date_minus_two_days_no_hyphens=${end_date_minus_two_days//-}

current_table_name="${DEST_TABLE}_v${end_date_no_hyphens}"
one_day_previous_table_name="${DEST_TABLE}_v${end_date_minus_one_day_no_hyphens}"
two_days_previous_table_name="${DEST_TABLE}_v${end_date_minus_two_days_no_hyphens}"
current_table_name_fishing_events="${DEST_TABLE}_temp_v${end_date_no_hyphens}"

view_name="${DEST_TABLE//:/.}"

echo "Current table=${current_table_name}"
echo "One day previous table=${one_day_previous_table_name}"
echo "Two days previous table=${two_days_previous_table_name}"
echo "Temporal table with fishing events=${current_table_name_fishing_events}"


################################################################################
# Force that the destination tables exists
################################################################################
echo "Ensuring events table ${current_table_name} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_LOITERING}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json

# Current table
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  --time_partitioning_type=MONTH \
  "${current_table_name}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"


# previous table
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  --time_partitioning_type=MONTH \
  "${one_day_previous_table_name}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${END_DATE_MINUS_ONE_DAY}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Delete existing records
################################################################################
DELETE_SQL=${ASSETS}/bigquery/delete-daterange.sql.j2
echo "Deleting existing records for ${START_DATE} to ${END_DATE}"
jinja2 ${DELETE_SQL} \
  -D table=${current_table_name//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --max_rows=0
if [ "$?" -ne 0 ]; then
  echo "  Unable to delete records for table ${current_table_name} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

################################################################################
# Inserting new records
################################################################################
INSERT_SQL=${ASSETS}/bigquery/fishing-events-1.sql.j2

if [ "$ALL_VESSELS_BYYEAR_VERSION" = "v2" ]; then
    INSERT_SQL=${ASSETS}/bigquery/fishing-events-1.v2.sql.j2
fi

echo "SQl query: ${INSERT_SQL}"
echo "Creating temporal table with fishing-events ${START_DATE} to ${END_DATE}"

jinja2 "${INSERT_SQL}" \
   -D messages="${SOURCE_MESSAGES}" \
   -D start_date="${START_DATE}" \
   -D end_date="${END_DATE}" \
   -D segs="${SOURCE_SEGS}" \
   -D segment_vessel=${SOURCE_SEGMENT_VESSEL} \
   -D vi_ssvid_by_year=${SOURCE_VI_SSVID_BY_YEAR} \
   -D fishing_vessels=${SOURCE_FISHING_VESSELS} \
   -D spatial_measures_table=${SOURCE_SPATIAL_MEASURES} \
   -D regions_table=${REGIONS_TABLE//:/.} \
   -D vessel_identity_core=${VESSEL_IDENTITY_CORE//:/.} \
   -D vessel_identity_authorization=${VESSEL_IDENTITY_AUTHORIZATION//:/.} \
   | bq query --headless --max_rows=0 --allow_large_results \
     --replace \
     --destination_table ${current_table_name_fishing_events}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${current_table_name_fishing_events} from ${START_DATE} to ${END_DATE}"
  exit 1
fi
bq update --expiration 3600 ${current_table_name_fishing_events}

INSERT_SQL=${ASSETS}/bigquery/fishing-events-2.sql.j2

if [ "$ALL_VESSELS_BYYEAR_VERSION" = "v2" ]; then
    INSERT_SQL=${ASSETS}/bigquery/fishing-events-2.v2.sql.j2
fi

echo "SQl query: ${INSERT_SQL}"
echo "Inserting new records for ${START_DATE} to ${END_DATE}"

jinja2 "${INSERT_SQL}" \
   -D messages="${SOURCE_MESSAGES}" \
   -D start_date="${START_DATE}" \
   -D end_date="${END_DATE}" \
   -D segs="${SOURCE_SEGS}" \
   -D segment_vessel=${SOURCE_SEGMENT_VESSEL} \
   -D vi_ssvid_by_year=${SOURCE_VI_SSVID_BY_YEAR} \
   -D fishing_vessels=${SOURCE_FISHING_VESSELS} \
   -D spatial_measures_table=${SOURCE_SPATIAL_MEASURES} \
   -D regions_table=${REGIONS_TABLE//:/.} \
   -D vessel_identity_core=${VESSEL_IDENTITY_CORE//:/.} \
   -D vessel_identity_authorization=${VESSEL_IDENTITY_AUTHORIZATION//:/.} \
   -D source_fishing_events=${current_table_name_fishing_events//:/.} \
   | bq query --headless --max_rows=0 --allow_large_results \
     --replace \
     --destination_table ${current_table_name}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${current_table_name} from ${START_DATE} to ${END_DATE}"
  echo "Removing temporal table [${current_table_name_fishing_events}]"
  bq rm -f -t "${current_table_name_fishing_events}"
  exit 1
fi


################################################################################
# Create new view
################################################################################
echo "Creating view [${view_name}]"
echo "CREATE OR REPLACE VIEW ${view_name} OPTIONS(description=\"proto_events_fishing\") AS SELECT * FROM ${current_table_name//:/.}"

bq query \
  --use_legacy_sql=false \
  "CREATE OR REPLACE VIEW ${view_name} OPTIONS(description=\"proto_events_fishing\") AS SELECT * FROM ${current_table_name//:/.}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create view ${view_name}"
  exit 1
fi


################################################################################
# Remove two days before table
################################################################################
echo "Removing two days before table [${two_days_previous_table_name}]"
bq rm -f -t "${two_days_previous_table_name}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to remove two days before table ${two_days_previous_table_name}"
  exit 1
fi


################################################################################
# Remove temporal table
################################################################################
echo "Removing temporal table [${current_table_name_fishing_events}]"
bq rm -f -t "${current_table_name_fishing_events}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to remove temporal table ${current_table_name_fishing_events}"
  exit 1
fi

echo "${DEST_TABLE} Done."
