#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_TABLE \
  VESSEL_INFO \
  NAMED_ANCHORAGES \
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n$0 YYYY-MM-DD[,YYYY-MM-DD] SOURCE_TABLE VESSEL_INFO NAMED_ANCHORAGES DEST_TABLE\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [[ -z $END_DATE ]]; then
  END_DATE=${START_DATE}
fi

echo "Running $0"
echo "  DATE_RANGE: $DATE_RANGE"
echo "  SOURCE_TABLE: $SOURCE_TABLE"
echo "  VESSEL_INFO: $VESSEL_INFO"
echo "  NAMED_ANCHORAGES: $NAMED_ANCHORAGES"
echo "  DEST_TABLE: $DEST_TABLE"
################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  ${DEST_TABLE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Delete existing records
################################################################################
DELETE_SQL=${ASSETS}/bigquery/delete-daterange.sql.j2
echo "Deleting existing records for ${START_DATE} to ${END_DATE}"
jinja2 ${DELETE_SQL} \
  -D table=${DEST_TABLE//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --max_rows=0
if [ "$?" -ne 0 ]; then
  echo "  Unable to delete records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

################################################################################
# Inserting new records
################################################################################
INSERT_SQL=${ASSETS}/bigquery/anchorage-events.sql.j2
echo "Inserting new records for ${START_DATE} to ${END_DATE}"
jinja2 ${INSERT_SQL} \
   -D source=${SOURCE_TABLE//:/.} \
   -D vessel_info=${VESSEL_INFO//:/.} \
   -D named_anchorages=${NAMED_ANCHORAGES//:/.} \
   -D dest=${DEST_TABLE//:/.} \
   -D start_yyyymmdd=$(yyyymmdd ${START_DATE}) \
   -D end_yyyymmdd=$(yyyymmdd ${END_DATE}) \
   | bq query --max_rows=0


if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

echo "  ${DEST_TABLE} Done."
