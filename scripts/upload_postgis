#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
ASSETS=${THIS_SCRIPT_DIR}/../assets
source ${THIS_SCRIPT_DIR}/pipeline.sh

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n$0 SOURCE TEMP_BUCKET  DEST_INSTANCE\n"
}

if [[ $# -ne 4  ]]; then
  display_usage
  exit 1
fi

ARGS=( \
  SOURCE \
  TEMP_BUCKET \
  DEST_INSTANCE \
)
TEMP_PATH=gs://${TEMP_BUCKET}/pipe-events/$( date -u "+%FT%T.%N" )
################################################################################
# Export events to json files
################################################################################
# echo "Exporting events from $SOURCE"
# EXTRACT_PATH=$TEMP_PATH/bq/*.json
# bq extract \
#   --destination_format=NEWLINE_DELIMITED_JSON \
#   $SOURCE \
#   $EXTRACT_PATH
# if [ "$?" -ne 0 ]; then
#   echo "  Unable to extract ${SOURCE} to ${EXTRACT_PATH}"
#   exit 1
# fi
# echo "  Exported events from ${SOURCE} to ${EXTRACT_PATH}"

################################################################################
# Download files locally
################################################################################
# echo "Downloading events from ${SOURCE} to local disk"
LOCAL_JSON_PATH=./data/json/
# mkdir -p ${LOCAL_JSON_PATH}
# gsutil -m cp ${EXTRACT_PATH} ${LOCAL_JSON_PATH}
# if [ "$?" -ne 0 ]; then
#   echo "  Unable to download events data locally from ${TEMP_BUCKET}"
#   exit 1
# fi
# echo "  Downloaded  events from ${TEMP_BUCKET}"

################################################################################
# Convert format from json to exported sql format
################################################################################
echo "Converting downloaded files to csv format"
LOCAL_CSV_PATH=./data/csv/
LOCAL_CSV_FILE=${LOCAL_CSV_PATH}/data.csv
cat LOCAL_JSON_PATH/*.json | python -m pipe_events.postgis.formatter ${LOCAL_CSV_FILE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to convert events from JSON to CSV format"
  exit 1
fi
echo "  Coverted events from JSON to CSV"

################################################################################
# Load the data
################################################################################


# TODO: Run a copy command to bulk-load data
# TODO: Enable indices
# TODO: Rename tables
