#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_MESSAGES \
  SOURCE_SEGMENT_VESSEL \
  SOURCE_SEGS \
  SOURCE_VI_SSVID_BY_YEAR \
  SOURCE_FISHING_VESSELS \
  SOURCE_SPATIAL_MEASURES \
  VESSEL_IDENTITY_CORE \
  VESSEL_IDENTITY_AUTHORIZATION \
  DEST_TABLE
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n${0} ${ARGS[*]}\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [[ -z $END_DATE ]]; then
  END_DATE=${START_DATE}
fi

current_table_name_fishing_events="${DEST_TABLE}_temp"

################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  "${DEST_TABLE}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

echo "Running $0"
echo "  SOURCE_MESSAGES: $SOURCE_MESSAGES"
echo "  SOURCE_SEGMENT_VESSEL: $SOURCE_SEGMENT_VESSEL"
echo "  SOURCE_SEGMENT_VESSEL: $SOURCE_SEGMENT_VESSEL"
echo "  SOURCE_SEGS: $SOURCE_SEGS"
echo "  SOURCE_VI_SSVID_BY_YEAR: $SOURCE_VI_SSVID_BY_YEAR"
echo "  SOURCE_FISHING_VESSELS: $SOURCE_FISHING_VESSELS"
echo "  SOURCE_SPATIAL_MEASURES: $SOURCE_SPATIAL_MEASURES"
echo "  VESSEL_IDENTITY_CORE: $VESSEL_IDENTITY_CORE"
echo "  VESSEL_IDENTITY_AUTHORIZATION: $VESSEL_IDENTITY_AUTHORIZATION"
echo "  DEST_TABLE: $DEST_TABLE"

################################################################################
# Delete existing records
################################################################################
DELETE_SQL=${ASSETS}/bigquery/delete-daterange.sql.j2
echo "Deleting existing records for ${START_DATE} to ${END_DATE}"
jinja2 ${DELETE_SQL} \
  -D table=${DEST_TABLE//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --max_rows=0
if [ "$?" -ne 0 ]; then
  echo "  Unable to delete records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

################################################################################
# Inserting new records
################################################################################
INSERT_SQL=${ASSETS}/bigquery/fishing-events.sql.j2
echo "Creating temporal table with fishing-events ${START_DATE} to ${END_DATE}"

jinja2 "${INSERT_SQL}" \
   -D messages="${SOURCE_MESSAGES}" \
   -D start_date="${START_DATE}" \
   -D end_date="${END_DATE}" \
   -D segs="${SOURCE_SEGS}" \
   -D segment_vessel=${SOURCE_SEGMENT_VESSEL} \
   -D vi_ssvid_by_year=${SOURCE_VI_SSVID_BY_YEAR} \
   -D fishing_vessels=${SOURCE_FISHING_VESSELS} \
   -D spatial_measures_table=${SOURCE_SPATIAL_MEASURES} \
   -D vessel_identity_core=${VESSEL_IDENTITY_CORE//:/.} \
   -D vessel_identity_authorization=${VESSEL_IDENTITY_AUTHORIZATION//:/.} \
   | bq query --headless --max_rows=0 --allow_large_results \
     --replace \
     --destination_table ${current_table_name_fishing_events}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${current_table_name_fishing_events} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

INSERT_SQL=${ASSETS}/bigquery/fishing-events-authoriations.sql.j2
echo "Inserting new records for ${START_DATE} to ${END_DATE}"

jinja2 "${INSERT_SQL}" \
   -D messages="${SOURCE_MESSAGES}" \
   -D start_date="${START_DATE}" \
   -D end_date="${END_DATE}" \
   -D segs="${SOURCE_SEGS}" \
   -D segment_vessel=${SOURCE_SEGMENT_VESSEL} \
   -D vi_ssvid_by_year=${SOURCE_VI_SSVID_BY_YEAR} \
   -D fishing_vessels=${SOURCE_FISHING_VESSELS} \
   -D spatial_measures_table=${SOURCE_SPATIAL_MEASURES} \
   -D vessel_identity_core=${VESSEL_IDENTITY_CORE//:/.} \
   -D vessel_identity_authorization=${VESSEL_IDENTITY_AUTHORIZATION//:/.} \
   -D source_fishing_events=${current_table_name_fishing_events//:/.} \
   | bq query --headless --max_rows=0 --allow_large_results \
     --append_table \
     --destination_table ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  echo "Removing temporal table [${current_table_name_fishing_events}]"
  bq rm -f -t "${current_table_name_fishing_events}" 
  exit 1
fi

################################################################################
# Remove temporal table
################################################################################
echo "Removing temporal table [${current_table_name_fishing_events}]"
bq rm -f -t "${current_table_name_fishing_events}" 
if [ "$?" -ne 0 ]; then
  echo "  Unable to remove temporal table ${current_table_name_fishing_events}"
  exit 1
fi

echo "${DEST_TABLE} Done."

