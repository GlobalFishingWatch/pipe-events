#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_LOITERING \
  SOURCE_SEGMENT_INFO \
  SOURCE_SPATIAL_MEASURES \
  REGIONS_TABLE \
  SOURCE_RESEARCH_SEGS \
  ALL_VESSELS_BYYEAR_V \
  SOURCE_VESSEL_INFO \
  MINIMUM_DISTANCE_FROM_SHORE_NM \
  DEST_TABLE
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n${0} ${ARGS[*]}\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [[ -z $END_DATE ]]; then
  END_DATE=${START_DATE}
fi

################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_LOITERING}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  "${DEST_TABLE}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Delete existing records
################################################################################
DELETE_SQL=${ASSETS}/bigquery/delete-daterange.sql.j2
echo "Deleting existing records for ${START_DATE} to ${END_DATE}"
jinja2 ${DELETE_SQL} \
  -D table=${DEST_TABLE//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --max_rows=0
if [ "$?" -ne 0 ]; then
  echo "  Unable to delete records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

################################################################################
# Inserting new records
################################################################################
INSERT_SQL=${ASSETS}/bigquery/loitering-events.sql.j2
echo "Inserting new records for ${START_DATE} to ${END_DATE}"

jinja2 "${INSERT_SQL}" \
   -D start_date="${START_DATE}" \
   -D end_date="${END_DATE}" \
   -D source_loitering="${SOURCE_LOITERING}" \
   -D source_segment_info="${SOURCE_SEGMENT_INFO}" \
   -D source_spatial_measures=${SOURCE_SPATIAL_MEASURES} \
   -D source_regions_table=${REGIONS_TABLE//:/.} \
   -D source_research_segs=${SOURCE_RESEARCH_SEGS} \
   -D all_vessels_byyear_v_table=${ALL_VESSELS_BYYEAR_V} \
   -D source_vessel_info=${SOURCE_VESSEL_INFO} \
   -D minimum_distance_from_shore_nm=${MINIMUM_DISTANCE_FROM_SHORE_NM} \
   | bq query --headless --max_rows=0 --allow_large_results \
     --append_table \
     --destination_table ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

echo "${DEST_TABLE} Done."
